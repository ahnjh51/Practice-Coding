#Portfolio
library(quantmod)
library(PerformanceAnalytics)

tickers <- c("FB","AAPL","AMZN","GOOG")
weights <- c(0.25,0.25,0.25,0.25)
portfolioPrices <- NULL
for(ticker in tickers) {
portfolioPrices <- cbind(portfolioPrices, 
getSymbols.yahoo(ticker, from = '2016-01-01', periodicity = 'daily', auto.assign=FALSE)[,4])
   }
#return on each stock
portfolioReturns <- na.omit(ROC(portfolioPrices))

#checking missing data
colSums(is.na(portfolioPrices))

#benchmark (S&P 500)
benchmarkPrices <- getSymbols.yahoo('^GSPC', from = '2016-01-01', periodicity = 'daily', auto.assign=FALSE)[,4]
View(benchmarkPrcies)
benchmarkReturns <- na.omit(ROC(benchmarkPrices))
colSums(is.na(benchmarkPrcies))

#overall portfolio return
portfolioReturn <-Return.portfolio(portfolioReturns, weights = weights)

#calculate beta
CAPM.beta(portfolioReturn,benchmarkReturns, 0.24/252)

#calculate alpha
CAPM.jensenAlpha(portfolioReturn, benchmarkReturns, 0.24/252)

#sharpratio
SharpeRatio(portfolioReturn, 0.24/252)

table.AnnualizedReturns(portfolioReturn)
table.CalendarReturns(portfolioReturn)

#Reference 
https://www.youtube.com/watch?v=2Y4HX0UUcrA

# Portfolio Optimization
library(forecast)
library(PortfolioAnalytics)
library(ROI.plugin.glpk)
library(ROI.plugin.quadprog)
library(ROI)

portf <- portfolio.spec(colnames(portfolioReturns)

portf <- add.constraint(portf, type="weight_sum", min_sum=1,max_sum=1)
portf <- add.constraint(portf, type="box",min=0.10,max=0.40)
portf <- add.objective(portf, type="return",name="mean")
portf <- add.objective(portf, type="risk",name="StdDev")

optPort <- optimize.portfolio(portfolioReturns,portf,optimize_method = "ROI", trace = TRUE)

chart.Weights(optPort)

ef <-extractEfficientFrontier(optPort, match.col ="StdDev",n.portfolios = 25, risk_aversion =  NULL)

chart.EfficientFrontier(ef,
                        match.col = "StdDev", n.portfolios = 25, xlim = NULL, ylim = NULL,
                        cex.axis = 0.8, element.color = "darkgray", main = "Efficient Frontier",
                        RAR.text = "SR", rf = 0, tangent.line = TRUE, cex.legend = 0.8,
                        chart.assets = TRUE, labels.assets = TRUE, pch.assets = 21,
                        cex.assets = 0.8)

#Rebalancing

portf <- portfolio.spec(colnames(portfolioReturns)

portf <- add.constraint(portf, type="weight_sum", min_sum=0.99,max_sum=1.01)
portf <- add.constraint(portf, type="box",min=0.10,max=0.40)
portf <- add.objective(portf, type="return",name="mean")
portf <- add.objective(portf, type="risk",name="StdDev", target=0.005)
portf <- add.constraint(portf, type="transaction_cost", ptc=0.001)

rp <- random_portfolios(portf, 10000, "sample")

opt_rebal <- optimize.portfolio.rebalancing(portfolioReturns,
                                              +  portf,
                                              +  search_size = 5000,
                                              +  optimize_method = "random",
                                              +  rp=rp,
                                              +  rebalance_on = "months",
                                              +  training_period=1,
                                              +  rolling_window=10)

equal.weight <- rep(1 / ncol(portfolioReturns),ncol(portfolioReturns))
benchmark <- Return.portfolio(portfolioReturns, weights = equal.weight)
colnames(benchmark) <- "Benchmark Portfolio"

sp500prices <- getSymbols.yahoo("SPY", from = '2016-01-01', periodicity = 'daily', auto.assign=FALSE)
sp500Rets <- na.omit(ROC(sp500prices))
sp500Rets <- as.xts(sp500Rets)

chart.Weights(opt_rebal, main="Rebalance Weights Over Time")

rebal_weights <- extractWeights(opt_rebal)
rebal_returns <- Return.portfolio(portfolioReturns,weights=rebal_weights)
rets_df <- cbind(rebal_returns, benchmark, sp500Rets)
charts.PerformanceSummary(rets_df, main="Performance")
