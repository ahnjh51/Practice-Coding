library(quantmod)
library(PerformanceAnalytics)
library(tidyquant)
library(plotly)
library(timetk)
library(magrittr)
library(tidyr)
library(ggplot2)
library(tidyverse)

price_data <- tq_get(symbols,
                     from = '2012-01-01',
                     to = '2022-10-02',
                     get = 'stock.prices')

log_ret <- price_data %>%
  group_by(symbol) %>%
  tq_transmute(select = adjusted,
               mutate_fun = periodReturn,
               period = 'daily',
               col_rename = 'ret',
               type = 'log')
head(log_ret)

log_ret_xts <- log_ret %>%
  spread(symbol, value = ret) %>%
  tk_xts()
head(log_ret_xts)

mean_ret <- colMeans(log_ret_xts)
print(round(mean_ret,5))

cov_mat <- cov(log_ret_xts)*252
print(round(cov_mat,4))

wts <- runif(n=length(symbols))
print(wts)
wts <- wts/sum(wts)
sum(wts)
port_returns <- (sum(wts*mean_ret)+1)^252 - 1
port_risk <- sqrt(t(wts) %*% (cov_mat %*% wts))
print(port_risk)

sharpe_ratio <- (port_returns-0.037)/port_risk
print(sharpe_ratio)



num_port <- 5000

all_wts <- matrix(nrow=num_port,
                  ncol = length(symbols))

port_returns <- vector('numeric',length = num_port)
port_risk <- vector('numeric',length = num_port)
sharper_ratio <- vector('numeric',length = num_port)

for (i in seq_along(port_returns)) {
  
  wts <- runif(length(symbols))
  wts <- wts/sum(wts)
  
  all_wts[i,] <- wts
  
  port_ret <- sum(wts*mean_ret)
  port_ret <- ((port_ret +1 )^252) -1
  
  port_returns[i] <- port_ret
  
  
  port_sd <- sqrt(t(wts) %*% (cov_mat %*% wts))
  port_risk[i] <- port_sd
  
  sr <- (port_ret-0.0037)/port_sd
  sharpe_ratio[i] <- sr
}



portfolio_values <- tibble(Return = port_returns,
                           Risk = port_risk,
                           SharpeRatio = sharpe_ratio)

all_wts <- tk_tbl(all_wts)
colnames(all_wts) <- colnames(log_ret_xts)
portfolio_values <- tk_tbl(cbind(all_wts,portfolio_values))

head(portfolio_values)

min_var <- portfolio_values[which.min(portfolio_values$Risk),]
max_sr <- portfolio_values[which.max(portfolio_values$SharpeRatio),]

p <- min_var %>%
  gather(AMD:PEP, key = Asset,
         value = Weights) %>%
  mutate(Asset = as.factor(Asset)) %>%
  ggplot(aes(x= fct_reorder(Asset,Weights),y=Weights,fill=Asset)) +
  geom_bar(stat = 'identity') +
  theme_minimal() +
  labs(x='Assets',y='Weights',title='Minimun Variance Portfolio Weights')+
  scale_y_continuous(labels = scales::percent)

ggplotly(p)

p1 <- max_sr %>%
  gather(AMD:PEP, key = Asset,
         value = Weights) %>%
  mutate(Asset = as.factor(Asset)) %>%
  ggplot(aes(x= fct_reorder(Asset,Weights),y=Weights,fill=Asset)) +
  geom_bar(stat = 'identity') +
  theme_minimal() +
  labs(x='Assets',y='Weights',title='Maximun Sharpe Ratio Portfolio Weights')+
  scale_y_continuous(labels = scales::percent)

ggplotly(p1)

p2 <- portfolio_values %>%
  ggplot(aes(x = Risk, y = Return, color = SharpeRatio)) +
  geom_point() +
  theme_classic() +
  scale_y_continuous(labels = scales::percent) +
  scale_x_continuous(labels = scales::percent) +
  labs(x = 'Annualized Risk',
       y = 'Annualized Returns',
       title = "Portfolio Optimization & Efficient Frontier") +
  geom_point(aes(x = Risk,
                 y = Return), data = min_var, color = 'red') +
  geom_point(aes(x = Risk,
                 y = Return), data = max_sr, color = 'red') +
  annotate('text', x = 0.20, y = 0.42, label = "Tangency Portfolio") +
  annotate('text', x = 0.18, y = 0.01, label = "Minimum variance portfolio") +
  annotate(geom = 'segment', x = 0.14, xend = 0.135,  y = 0.01, 
           yend = 0.06, color = 'red', arrow = arrow(type = "open")) +
  annotate(geom = 'segment', x = 0.22, xend = 0.2275,  y = 0.405, 
           yend = 0.365, color = 'red', arrow = arrow(type = "open"))


ggplotly(p2)
